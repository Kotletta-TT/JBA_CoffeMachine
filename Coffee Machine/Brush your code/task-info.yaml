type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |-
    water = 400
    milk = 540
    coffee = 120
    disposable_cups = 9
    money = 550


    def status():
        print(f"""The coffee machine has:
              {water} of water
              {milk} of milk
              {coffee} of coffe beans
              {disposable_cups} of disposable cups
              {money} of money""")

    def buy():
        chose_coffee = input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\n")
        if chose_coffee == "1":
            create_espresso()
        elif chose_coffee == "2":
            create_latte()
        elif chose_coffee == "3":
            create_cappuccino()

    def fill():
        global water, milk, coffee, disposable_cups
        water += int(input("Write how many ml of water do you want to add:\n"))
        milk += int(input("Write how many ml of milk do you want to add:\n"))
        coffee += int(input("Write how many grams of coffee beans do you want to add:\n"))
        disposable_cups += int(input("Write how many disposable cups of coffee do you want to add:\n"))
        status()

    def take():
        global money
        print(f"I gave you ${money}\n")
        money = 0
        status()

    def create_cappuccino():
        global water, milk, coffee, disposable_cups, money
        coffee_cup = 12
        water_cup = 200
        milk_cup = 100
        disposable_cup = 1
        price_cup = 6
        coffee -= coffee_cup
        water -= water_cup
        milk -= milk_cup
        disposable_cups -= disposable_cup
        money += price_cup
        status()

    def create_espresso():
        global water, coffee, disposable_cups, money
        coffee_cup = 16
        water_cup = 250
        disposable_cup = 1
        price_cup = 4
        coffee -= coffee_cup
        water -= water_cup
        disposable_cups -= disposable_cup
        money += price_cup
        status()

    def create_latte():
        global water, milk, coffee, disposable_cups, money
        coffee_cup = 20
        water_cup = 350
        milk_cup = 75
        disposable_cup = 1
        price_cup = 7
        coffee -= coffee_cup
        water -= water_cup
        milk -= milk_cup
        disposable_cups -= disposable_cup
        money += price_cup
        status()

    def start():
        status()
        action = input("Write action (buy, fill, take):\n")
        if action == "buy":
            buy()
        elif action == "fill":
            fill()
        elif action == "take":
            take()
        else:
            print("Please correct input\n")

    start()

    # ###################################TWO PART#############################################
    # supply_water = int(input("Write how many ml of water the coffee machine has:\n"))
    # supply_milk = int(input("Write how many ml of milk the coffee machine has:\n"))
    # supply_coffee = int(input("Write how many grams of coffee the coffee machine has:\n"))
    # need_cups = int(input("rite how many cups of coffee you will need:\n"))
    #
    # amount_cups = min(supply_coffee // COFFEE_CUP, supply_milk // MILK_CUP,
    #                   supply_water // WATER_CUP)
    #
    # if amount_cups == need_cups:
    #     print("Yes, I can make that amount of coffee")
    # elif amount_cups > need_cups:
    #     diff = amount_cups - need_cups
    #     print(f"Yes, I can make that amount of coffee (and even {diff} more than that)")
    # else:
    #     print(f"No, I can make only {amount_cups} cups of coffee")
    # #####################################FIRST PART########################################
    # print("Write how many cups of coffee you will need:")
    # count_coffee = abs(int(input()))
    # print(f"For {count_coffee} cups of coffee you will need:")
    # print(f"{count_coffee * WATER_CUP} ml of water")
    # print(f"{count_coffee * MILK_CUP} ml of milk")
    # print(f"{count_coffee * COFFEE_CUP} g of coffee beans")
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: -1
